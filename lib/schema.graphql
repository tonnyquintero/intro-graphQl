"Valida los tipos de nivel"
enum Level {
    principiante
    intermedio
    avanzado
}

type Course {
    _id: ID!,
    title: String!,
    teacher: String,
    description: String!,
    topic: String,
    people: [Student]
    level: Level
}

interface Person {
    _id: ID!,
    name: String!,
    email: String!
}

type Student implements Person {
    _id: ID!,
    name: String!,
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID!,
    name: String!,
    email: String!
    phone: String
}

type Query {
    "devuelve todos los cursos"
    getCourses: [
        Course
    ]
    "Devuelve un curso"
    getCourse(id: ID!): Course,


    "devuelve todos los estudiantes"
    getPeople: [
        Person
    ]
    "Devuelve un estudiante"
    getPerson(id: ID!): Person
    
}

input CourseInput {
    title: String!,
    teacher: String,
    description: String!,
    topic: String
    level: Level
}

input CourseEditInput {
    title: String,
    teacher: String,
    description: String,
    topic: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String
}

input PersonInput {
    name: String!,
    email: String!
    phone: String
    avatar: String
}

type Mutation {
    "Crea un curso"
    createCourse(input: CourseInput!): Course,

    "Edita un curso"
    editCourse(_id: ID! input: CourseEditInput!): Course

    "Edita un estudiante"
    editPerson(_id: ID! input: PersonEditInput!): Person

    "Crea un estudiante"
    createPerson(input: PersonInput!): Person

    "Elimina un curso"
    deleteCourse(id: ID!): String
    
    "Elimina un estudiante"
    deleteStudent(id: ID!): String

    "Agrega una persona a un curso"
    addPeople(courseID: ID!, personID: ID!): Course 
}